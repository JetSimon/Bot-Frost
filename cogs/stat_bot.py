import requests
from requests.exceptions import HTTPError
from discord.ext import commands
import discord
from bs4 import BeautifulSoup
import json
from ftfy import fix_text
from sportsreference.ncaaf.roster import Roster
from sportsreference.ncaaf.rankings import Rankings
from sportsreference.ncaaf.boxscore import Boxscore

headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'}
husker_schedule = []
huskerbot_footer="Generated by HuskerBot"

class StatBot(commands.Cog, name="CFB Stats"):
    def __init__(self, bot):
        self.bot = bot
        
    @commands.command()
    async def stats(self, ctx, year, *, name):
        """ Returns the current season's stats for searched player. """
        pass
        
    @commands.command()
    async def poll(self, ctx):
        """ Returns current Top 25 ranking from the Coach's Poll, AP Poll, and College Football Playoff ranking. """
        # Coaches Poll
        # AP Poll
        # CFP Ranking
        rankings = Rankings()
        # Prints a dictionary of just the team abbreviation and rank for the current
        # week.
        print(rankings.current)
        # Prints more detailed information including previous rank, full name, and
        # movement for all teams for the current week.
        print(rankings.current_extended)
        # Prints detailed information for all teams for all weeks where rankings
        # have been published for the requested season.
        print(rankings.complete)
        pass
    
    @commands.command()
    async def roster(self, ctx, year=2019):
        """ Returns the current roster. """
        pass
        '''edit_msg = await ctx.send("Loading...")

        await ctx.send("Setting up roster: NEBRASKA")
        huskers = Roster(team="NEBRASKA", year=year, slim=False)
        await ctx.send("Setup complete")
        # roster_string = "Nebraska's {} Roster:\n".format(year)

        await ctx.send("Printing players")
        i = 1
        for player in huskers.players:
            await ctx.send("{}: Player name: {}".format(i,player.name))
            i += 1
            # roster_string = roster_string + "Name: {}\nPosition: {}\n".format(player.name, player.position)

        await ctx.send("Print complete")
        # await edit_msg.edit(content=roster_string)'''

    @commands.command()
    async def boxscore(self, ctx, week: int, detailed=False):
        """ Returns the box score of the searched for game. """
        boxscore_date = ""
        if week == 1:
            boxscore_date = "2018-09-08"  # South Alabama
        elif week == 2:
            boxscore_date = "2019-09-07"  # Colorado
        elif week == 3:
            boxscore_date = "2019-09-14"  # Northern Illinois
        elif week == 4:
            boxscore_date = "2019-09-21"  # Illinois
        elif week == 5:
            boxscore_date = "2019-09-28"  # Ohio State
        elif week == 6:
            boxscore_date = "2019-10-05"  # Northwestern
        elif week == 7:
            boxscore_date = "2019-10-12"  # Minnesota
        elif week == 8:
            boxscore_date = "2019-10-26"  # Indiana
        elif week == 9:
            boxscore_date = "2019-11-02"  # Purdue
        elif week == 10:
            boxscore_date = "2019-11-16"  # Wisconsin
        elif week == 11:
            boxscore_date = "2019-11-23"  # Maryland
        elif week == 12:
            boxscore_date = "2019-11-29"  # Iowa

        edit_msg = await ctx.send("Thinking...")

        game = Boxscore("{}-nebraska".format(boxscore_date))
        embed = discord.Embed(title="Boxscore for {} vs. {}".format(game.winning_name, game.losing_name))

        # Basic
        basic_string = "Location: {} | Time: {}".format(game.stadium, game.time)
        embed.add_field(name="Game Info", value=basic_string)

        # Home
        i = 0
        for p in game.home_players:
            if i < 1:
                embed.add_field(name="Player", value=p.name)
                for stat in p.dataframe:
                    if stat:
                        embed.add_field(name="{}".format(p), value=p)
            i += 1
        i = 0
        # Away

        await edit_msg.edit(embed=embed, content="")
        
    @commands.command()
    async def lastplays(self, ctx):
        pass
    
    @commands.command(aliases=["sched",])
    async def schedule(self, ctx, year=2019):
        """ Returns the Nebraska Huskers football schedule. """
        edit_msg = await ctx.send("Loading...")

        url = "http://www.huskers.com/SportSelect.dbml?DB_OEM_ID=100&SPID=22&SPSID=3&q_season=" + str(year)
        page = None

        try:
            page = requests.get(headers=headers, url=url)
            page.raise_for_status()
        except HTTPError as http_err:
            print("HTTP error occurred: {}".format(http_err))
        except Exception as err:
            print("Other error:".format(err))

        soup = BeautifulSoup(page.text, 'html.parser')
        find_json = soup.find_all('script')

        temp_str = find_json[1].string
        # This is so ghetto, trimming the part of the string we don't want to use for JSON
        # front = "    window.__INITIAL_STATE__ = \'{\"site\":  "
        # end = ",\"status\":\"success\", \"time\":\"08/02/2019 19:25\"}\';  "
        # print("{} {}".format(len(front), len(end)))
        temp_str = temp_str[42:-51]
        fix_text(temp_str)
        temp_str = temp_str.replace("\\", "\\\\")

        husker_schedule = json.loads(temp_str)

        dump = False

        if dump:
            with open("husker_schedule.json", "w") as fp:
                json.dump(husker_schedule, fp, sort_keys=True, indent=4)
            fp.close()

        embed = discord.Embed(title="The {} Husker football season".format(year), color=0xff0000)
        # embed.set_thumbnail(url="http://image.cdnllnwnl.xosnetwork.com/fls/100/site_graphics/header_logo.jpg")

        for e in husker_schedule['schedule']['events']:
            game_result_string = ""

            if e['winLoss']:
                if e['opponentScore'] > e['homeScore']:
                    game_result_string = "{} - {}".format(e['opponentScore'], e['homeScore'])
                else:
                    game_result_string = "{} - {}".format(e['homeScore'], e['opponentScore'])
                game_result_string = "Result: {} ({})".format(e['winLoss'], game_result_string)
            value_str = "{}\n{} @ {}\n{}\n".format(e['location'], e['date'], e['time'], game_result_string)
            if len(e['opponent']) > 15:
                oppo = e['opponent'][:18] + "..."
            else:
                oppo = e['opponent']
            embed.add_field(name="{}".format(oppo), value=value_str, inline=True)

        embed.set_footer(text=huskerbot_footer)
        await edit_msg.edit(content="", embed=embed)


def setup(bot):
    bot.add_cog(StatBot(bot))